  Review error handling
    -eliminate panics from all library code?
    -consider what errors are returned and export a couple of package-level errors for them
  Review package path
    -atom.Atom is not a great name
    -review existing StorageGrid go code and figure out how to fit in with their import paths
  
  Documentation
    -doc all exported functions
    -write good help text for ccat/ctac
  
  
X Implement encoding
  Implement xml handling?
  Implement path handling, XPATH like but specified on the command line for any old atomContainer:
    ccat --path 
    -come up with something clever for attribute containers
  
  Implement container construction
    -client should be able to assemble raw atomContainers easily( including stuff like adding a child to a grandchild of the currently held container, use pathing here perhaps)
    -client should also be able to take a raw string of ADE ContainerText, substitute in a few values within the text, and convert it into a binary Container
  Implement creation of a set of nested Atoms from a byte slice without any other allocation other than pointers



===============================================================================
Deferred:
  -The Encoder interface, which would allow an arbitrary Go struct to be
  converted into an Atom.  This would be fine using Structs as containers, but
  obviously could not support some go types that have no equivalent ADE
  representation.


Eliminate FIXME
Eliminate logging except at debug level, and hide that
Eliminate all panics and log.Fatal from API
