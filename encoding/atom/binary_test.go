package atom

//
// Verify that UnmarshalBinary successfully reads all binary test files.
//
// Verify that MarshalBinary successfully writes atoms to binary, and that the
// serialized atoms match the original binary files.
//

import (
	"bytes"
	"crypto/sha1"
	"fmt"
	"math/rand"
	"testing"
)

func TestUnmarshalBinary(t *testing.T) {
	for _, test := range Tests {
		a := new(Atom)
		if err := a.UnmarshalBinary(test.binBytes); err != nil {
			t.Errorf("UnmarshalBinary(%s): expect no error, got %s", test.Name(), err.Error())
		}
	}
}

// NOTE: marshaled output is not guaranteed to always match its input, as
// odd but valid inputs may be normalized. However, they do match for these tests.
func TestMarshalBinary(t *testing.T) {
	var got []byte
	var err error

	for _, test := range Tests {

		// Test that MarshalBinary succeeds
		if got, err = test.atom.MarshalBinary(); err != nil {
			t.Errorf("MarshalBinary(%s): expect no error, got %s", test.Name(), err.Error())
		}

		// Verify that resulting bytes match original length
		if len(got) != len(test.binBytes) {
			t.Errorf("MarshalBinary: want %d bytes, got %d bytes for %s", len(test.binBytes), len(got), test.Name())
		}

		// Verify that resulting bytes are binary-identical
		gotSum := sha1.Sum(got)
		wantSum := sha1.Sum(test.binBytes)
		if gotSum != wantSum {
			t.Errorf("MarshalBinary: binary output differs from original: %s", test.Name())
		}
	}
}

// Randomly select 10 test atoms.  Convert their binary forms to hex using the
// function under test.
// Compare the result with the canonical test atom.
func TestReadAtomsFromHex(t *testing.T) {
	tests := make(map[string]*Atom)
	for _, i := range rand.Perm(len(Tests)) {
		test := Tests[i]
		hexString, err := BytesToHexString(test.binBytes)
		if err != nil {
			panic(fmt.Errorf("failed to convert bytes to hex string: %v", err))
		}
		tests[hexString] = test.atom
	}

	for hex, a := range tests {
		atoms, err := ReadAtomsFromHex(bytes.NewBuffer([]byte(hex)))
		if err != nil {
			t.Errorf("TestReadAtomsFromHex(%s): returned error %v", a.Name(), err)
		}
		if len(atoms) == 0 {
			t.Errorf("TestReadAtomsFromHex(%s): failed to get atom results from hex", a.Name())
		}
		gotText, err := atoms[0].MarshalText()
		if err != nil {
			t.Errorf("TestReadAtomsFromHex(%s): failed to get usable atom value from ReadAtomsFromHex()", a.Name())
		}
		wantText, err := a.MarshalText()
		if err != nil {
			t.Errorf("TestReadAtomsFromHex(%s): could not run test, unable to generate expected result text", a.Name())
		}
		if string(gotText) != string(wantText) {
			t.Errorf("TestReadAtomsFromHex(%s): Result mismatch for atom %s", a.Name())
		}
	}
}

var BID0_HEX = `0000004442494430434F4E5400000010425645525549333200000001000000144254494D55493634000546592CD6DB2C000000144E45585455493634DDDDF0000C000000`
var GINF_HEX = `000008CF47494E46434F4E5400000010425645525549333200000004000000144254494D554936340005465925BB6DFF0000007C47494456434F4E5400000010415645525549333200000002000000144154494D55493634000000000000000100000010415654504643333255493332000000104150455246433332524541440000002C4156414C434F4E5400000010000000005549333200000002000000100000000155493332000DDDDF0000008047505644434F4E5400000010415645525549333200000002000000144154494D5549363400000000000000010000001041565450464333325549363400000010415045524643333252454144000000304156414C434F4E540000001000000000554933320000000200000014000000015549363400054658E7977E980000009A47564E44434F4E5400000010415645525549333200000002000000144154494D55493634000000000000000100000010415654504643333243535452000000104150455246433332524541440000004A4156414C434F4E54000000100000000055493332000000020000002E00000001435354527B4F49443D27322E31362E3132342E3131333539302E332E312E332E332E31277D000000007F47534956434F4E5400000010415645525549333200000002000000144154494D55493634000000000000000100000010415654504643333243535452000000104150455246433332524541440000002F4156414C434F4E540000001000000000554933320000000200000013000000014353545231302E342E30000000068A47434143434F4E5400000010415645525549333200000002000000144154494D55493634000000000000000100000010415654504643333243535452000000104150455246433332524541440000063A4156414C434F4E54000000100000000055493332000000020000061E00000001435354522D2D2D2D2D424547494E2043455254494649434154452D2D2D2D2D0A4D494945546A4343417A6167417749424167494A414F4531617245347A374D504D413047435371475349623344514542437755414D486378437A414A42674E560A42415954416C56544D524D77455159445651514945777044595778705A6D3979626D6C684D524977454159445651514845776C546457357565585A68624755780A4644415342674E5642416F544330356C644546776343424A626D4D754D527377475159445651514C45784A4F5A5852426348416755335276636D466E5A5564530A535551784444414B42674E5642414D544130645156444165467730784E7A41784D5467774E6A557A4D5456614677307A4F4441784D5463774E6A557A4D5456610A4D486378437A414A42674E5642415954416C56544D524D77455159445651514945777044595778705A6D3979626D6C684D524977454159445651514845776C540A6457357565585A68624755784644415342674E5642416F544330356C644546776343424A626D4D754D527377475159445651514C45784A4F5A585242634841670A55335276636D466E5A556453535551784444414B42674E5642414D544130645156444343415349774451594A4B6F5A496876634E4151454242514144676745500A4144434341516F4367674542414B70766D5237556E4F614B4D64446C4159544971744B3973546B574C4B453262764E596E79507155547264534269782F4B674E0A47765844324F5938347157695373415A35364D527847535862754E33682B4E794C54574531734E4A303854622B6C4A5164534C6C542F34783369415074686D2F0A7658426D5557437865544A6762442B3053377A7149575858616744787353574150525463304A554C2B32327467634A62484941444766446168667448447771550A646E51513431686E69465353464F533176452F5167554C6C4B646770574A625A7842676C385166503772344B6D644956497569436956745478394533376B736A0A765A514A304179384F612F723348517845765776735478413475567A6C7A626971464B544C6155586A746E656D6D3076512F59435A67776735535A6F7963474A0A347866566D36542F31652B664D786B79684B3946426F3557534B6C3978366E67624255434177454141614F42334443423254416442674E5648513445466751550A396A78774B6665776D636C354E6A6F535161736B696E576B4337637767616B4741315564497753426F5443426E6F4155396A78774B6665776D636C354E6A6F530A5161736B696E576B43376568653652354D486378437A414A42674E5642415954416C56544D524D77455159445651514945777044595778705A6D3979626D6C680A4D524977454159445651514845776C546457357565585A68624755784644415342674E5642416F544330356C644546776343424A626D4D754D527377475159440A5651514C45784A4F5A5852426348416755335276636D466E5A556453535551784444414B42674E5642414D54413064515649494A414F4531617245347A374D500A4D41774741315564457751464D414D42416638774451594A4B6F5A496876634E4151454C4251414467674542414A5669456A7642567443523231454D6259572B0A4D413379544B616A3371392F32714B5759456B4C695241684879636E5341486976536E533652376F44632B305965347374344F5734694E31676C4A50744233450A41483176434C546646553370595035444461534D583352554432546F74754D73665677437647375A5649536752484165565149677163527576357A544E6465440A6761544C304669436A6E65474650395534584C4E7042346C4D3364427A476856372F67724D4668536C37356A5668393250442B4B6D6143584230386E6A3862780A52344551677668435970313775447A684451624A4437434575743577527979442F644E70484C4375326C6E4B64614245574378457A64556345334657576F612B0A33653931504A2B382B65796A50314659697859394A636A4431754F44777337566C573971527278433239555857344E435546785A53496D4C37685271376D572B0A7A68593D0A2D2D2D2D2D454E442043455254494649434154452D2D2D2D2D00`
